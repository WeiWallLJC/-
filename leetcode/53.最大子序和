给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

贪心算法，在循环的每一步中比较当前最大总和加上下一个数字后的结果与下一个数字本身的大小，将大的一方赋值给当前最大总和，再将当前最大总和与最终最大总和比较
，大者赋给最终最大总和：
public int maxSubArray(int[] nums) {
        int curmax=nums[0],finalmax=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            curmax=Math.max(nums[i],curmax+nums[i]);
            finalmax=Math.max(finalmax,curmax);
        }
        return finalmax;
    }
    
动态规划，若前一个数大于零，就将这个数加到下一个数中，这样递加可以将最大总和存在下一个数中：
public int maxSubArray(int[] nums) {
        int n = nums.length, maxSum = nums[0];
        for(int i = 1; i < n; ++i) {
        if (nums[i - 1] > 0) nums[i] += nums[i - 1];
        maxSum = Math.max(nums[i], maxSum);
        }
        return maxSum;
    }

分治算法，好难理解：
当最大子数组有 n 个数字时：
若 n==1，返回此元素。
left_sum 为最大子数组前 n/2 个元素，在索引为 (left + right) / 2 的元素属于左子数组。
right_sum 为最大子数组的右子数组，为最后 n/2 的元素。
cross_sum 是包含左右子数组且含索引 (left + right) / 2 的最大值。

public int crossSum(int[] nums, int left, int right, int p) {
    if (left == right) return nums[left];

    int leftSubsum = Integer.MIN_VALUE;
    int currSum = 0;
    for(int i = p; i > left - 1; --i) {
      currSum += nums[i];
      leftSubsum = Math.max(leftSubsum, currSum);
    }

    int rightSubsum = Integer.MIN_VALUE;
    currSum = 0;
    for(int i = p + 1; i < right + 1; ++i) {
      currSum += nums[i];
      rightSubsum = Math.max(rightSubsum, currSum);
    }

    return leftSubsum + rightSubsum;
  }

  public int helper(int[] nums, int left, int right) {
    if (left == right) return nums[left];

    int p = (left + right) / 2;

    int leftSum = helper(nums, left, p);
    int rightSum = helper(nums, p + 1, right);
    int crossSum = crossSum(nums, left, right, p);

    return Math.max(Math.max(leftSum, rightSum), crossSum);
  }

  public int maxSubArray(int[] nums) {
    return helper(nums, 0, nums.length - 1);
  }
