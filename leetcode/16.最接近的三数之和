给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

暴力法：
public int threeSumClosest(int[] nums, int target) {
        int minus=Integer.MAX_VALUE;
        int num=Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    if(Math.abs(nums[i]+nums[j]+nums[k]-target)<minus)
                    {
                        minus=Math.abs(nums[i]+nums[j]+nums[k]-target);
                        num=nums[i]+nums[j]+nums[k];
                    }
                }
            }
        }
        return num;
    }
    
双指针法，主要是排序，排序之后便可以用指针找到和最接近target值的三个数：
public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int ans = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length;i++) {
            int start = i+1, end = nums.length - 1;
            while(start < end) {
                int sum = nums[start] + nums[end] + nums[i];
                if(Math.abs(target - sum) < Math.abs(target - ans))
                    ans = sum;
                if(sum > target)
                    end--;
                else if(sum < target)
                    start++;
                else
                    return ans;
            }
        }
        return ans;
    }
