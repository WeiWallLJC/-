823.翻转图像
给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。

反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。

示例 1:

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
示例 2:

输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
说明:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1

先上笨办法：
public int[][] flipAndInvertImage(int[][] A) {
        return reverse(horizontalFlip(A));
    }
    public int[][] horizontalFlip(int[][] A)
    {
        int[][] B=new int[A.length][A[0].length];
        for(int i=0;i<A.length;i++)
        {
            for(int j=0;j<A[i].length;j++)
            {
                B[i][j]=A[i][A[i].length-1-j];
            }
        }
        return B;
    }
    public int[][] reverse(int[][] A)
    {
        int[][] B=new int[A.length][A[0].length];
        for(int i=0;i<A.length;i++)
        {
            for(int j=0;j<A[i].length;j++)
            {
                B[i][j]=A[i][j]==1?0:1;
            }
        }
        return B;
    }
简洁一点的笨办法：
public int[][] flipAndInvertImage(int[][] A) {
        int C = A[0].length;
        for (int[] row: A)
            for (int i = 0; i < (C + 1) / 2; ++i) {
                int tmp = row[i] ^ 1;
                row[i] = row[C - 1 - i] ^ 1;
                row[C - 1 - i] = tmp;
            }
        return A;
    }
大神解法，用到了双指针：
public int[][] flipAndInvertImage(int[][] A) {
	for (int i = 0; i < A.length; i++) {
		int start = 0, end = A[i].length - 1;
		while (start < end) {
			if (A[i][start] != A[i][end]) {
				start++;
				end--;
			} else {
				A[i][start] = A[i][start] == 1 ? 0 : 1;
				A[i][end] = A[i][end] == 1 ? 0 : 1;
				start++;
				end--;
			}
		}
		if (start == end) {
			A[i][start] = A[i][start] == 1 ? 0 : 1;
		}
	}
	return A;
}

作者解释：
1.遍历每一行,定义两个左右指针;
2.左指针从左向右,右指针从右向左遍历;
3.数字不同继续遍历,数字相同0→1,1→0;
4.指针指向同一位置,说明行元素为奇数个,0→1,1→0;

因为当左右指针指向的数字不同时，水平翻转再反转后的结果与原来是一样的，所以继续遍历，而相同时则要反转。