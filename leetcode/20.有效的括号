给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

1.左括号必须用相同类型的右括号闭合。
2.左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

public boolean isValid(String s) {
        if(s==null)
            return true;
        Stack<Character> stack=new Stack<Character>();
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='('||s.charAt(i)=='['||s.charAt(i)=='{')
                stack.push(s.charAt(i));
            else if(s.charAt(i)==')')
            {
                if(stack.isEmpty())
                    return false;
                if(stack.pop()!='(')
                    return false;
            }
            else if(s.charAt(i)==']')
            {
                if(stack.isEmpty())
                    return false;
                if(stack.pop()!='[')
                    return false;
            }
            else if(s.charAt(i)=='}')
            {
                if(stack.isEmpty())
                    return false;
                if(stack.pop()!='{')
                    return false;
            }
        }
        if(stack.isEmpty())
            return true;
        else 
            return false;
    }
因为左右括号要进行匹配，所以这一题我们可以用到栈，遇到左括号进栈，遇到右括号则用pop方法查看栈顶是否是相匹配的左括号。
手动排除输入为空等特殊情况，通过了本题。

class Solution {
  private HashMap<Character, Character> mappings;

  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {
    Stack<Character> stack = new Stack<Character>();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (this.mappings.containsKey(c)) {
        char topElement = stack.empty() ? '#' : stack.pop();
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        stack.push(c);
      }
    }
    return stack.isEmpty();
  }
}
官方解法用了哈希表来匹配左右括号。比我写的手动匹配要高明一些。
