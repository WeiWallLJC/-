输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意
: 在返回值的list中，数组长度大的数组靠前)

递归法(注意题目要求路径终点为叶结点)：
1.
ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        if(root==null)
            return result;
        int sum=0;
        int index=0;
        int[] path=new int[1000];
        isTargetPath(root,target,sum,path,index);
        return result;
    }
    public void isTargetPath(TreeNode root,int target,int sum,int[] path,int index)
    {
        if(root==null)
            return;
        sum+=root.val;
        path[index]=root.val;
        index++;
        
        if(sum==target&&root.left==null&&root.right==null)
        {
            ArrayList<Integer> pathlist=new ArrayList<Integer>();
            for(int i=0;i<index;i++)
                pathlist.add(path[i]);
            result.add(pathlist);
            return;
        }
        
        if(sum<target&&root.left!=null)
            isTargetPath(root.left,target,sum,path,index);
        if(sum<target&&root.right!=null)
            isTargetPath(root.right,target,sum,path,index);
    }

2.
public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        int sum=0;
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
        if(root==null)
            return result;
        ArrayList<Integer> list=new ArrayList<Integer>();
        isTargetPath(root,target,sum,result,list);
        return result;
    }
    public void isTargetPath(TreeNode root,int target,int sum,ArrayList<ArrayList<Integer>> result,ArrayList<Integer> list)
    {
        if(root==null)
            return;
        sum+=root.val;
        
        if(root.left==null&&root.right==null)
        {
            if(sum==target)
            {
                list.add(root.val);
                result.add(new ArrayList<Integer>(list));
                list.remove(list.size()-1);
            }
            return;
        }
        
        list.add(root.val);
        isTargetPath(root.left,target,sum,result,list);
        isTargetPath(root.right,target,sum,result,list);
        list.remove(list.size()-1);
    }
 两种方法本质完全相同，细节不同，记录一下。
