LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,
如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A
看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过
程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。

满足三个条件即可判断牌可以组成顺子，数组长度为5，最大值与最小值差小于五，没有重复的牌：
public boolean isContinuous(int [] numbers) {
        int[] d=new int[14];
        int len=numbers.length;
        if(len!=5)
            return false;
        int max=-1,min=14;
        for(int i=0;i<len;i++)
        {
            d[numbers[i]]++;
            if(numbers[i]==0)
                continue;
            if(d[numbers[i]]>1)
                return false;
            if(numbers[i]>max)
                max=numbers[i];
            if(numbers[i]<min)
                min=numbers[i];
        }
        if(max-min<5)
            return true;
        else
            return false;
    }
    
也可以用另一种方法，先排序，然后算出相邻数字的间隔数，再数出0的个数，如果0的数量更多就满足条件，如果某一数字出现多次则不满足：
public boolean isContinuous(int[] numbers) {
        int numOfZero = 0;
        int numOfInterval = 0;
        int length = numbers.length;
        if(length != 5){
           return false;
        }
        Arrays.sort(numbers);
        for (int i = 0; i < length - 1; i++) {
            if (numbers[i] == 0) {
                numOfZero++;
                continue;
            }
            if (numbers[i] == numbers[i + 1]) {
                return false;
            }
            numOfInterval += numbers[i + 1] - numbers[i] - 1;
        }
        if (numOfZero >= numOfInterval) {
            return true;
        }
        return false;
    }
