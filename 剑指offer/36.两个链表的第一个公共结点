输入两个链表，找出它们的第一个公共结点。

HashMap法：
public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        ListNode node1=pHead1;
        ListNode node2=pHead2;
        
        HashMap<ListNode,Integer> map=new HashMap<ListNode,Integer>();
        while(node1!=null)
        {
            map.put(node1,null);
            node1=node1.next;
        }
        while(node2!=null)
        {
            if(map.containsKey(node2))
                return node2;
            node2=node2.next;
        }
        return null;
    }

因为两个链表如果有公共结点的话一定有一部分尾段是相同的，因此算出两链表的长度差len，长的那个链表从第len个结点开始必有一段相同长度的链表与另一个链表相同：
public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        ListNode current1 = pHead1;
        ListNode current2 = pHead2;/
        if (pHead1 == null || pHead2 == null)
            return null;
        int length1 = getLength(current1);
        int length2 = getLength(current2);
         
        if (length1 >= length2) {
            int len = length1 - length2;
            while (len > 0) {
                current1 = current1.next;
                len--;
            }
        }
        else if (length1 < length2) {
            int len = length2 - length1;
            while (len > 0) {
                current2 = current2.next;
                len--;
            }
        }
        while(current1!=current2){
            current1=current1.next;
            current2=current2.next;
        }
        return current1;
    }
    public static int getLength(ListNode pHead) {
        int length = 0;
 
        ListNode current = pHead;
        while (current != null) {
            length++;
            current = current.next;
        }
        return length;
    }
