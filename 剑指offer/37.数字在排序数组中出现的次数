统计一个数字在排序数组中出现的次数。

暴力法：
public int GetNumberOfK(int [] array , int k) {
        int count=0;
        for(int i=0;i<array.length;i++){
           if(array[i]==k)
               count++;
       }
        return count;
    }

二分搜索法：
public int GetNumberOfK(int [] array , int k) {
        int index = Arrays.binarySearch(array, k);
        if(index<0)return 0;
        int cnt = 1;
        for(int i=index+1; i < array.length && array[i]==k;i++)
            cnt++;
        for(int i=index-1; i >= 0 && array[i]==k;i--)
            cnt++;
        return cnt;
    }
    
搜索左右边界的方法：
public int GetNumberOfK(int [] array , int k) {
        int a=0,b=array.length;
        for(int i=0;i<array.length;i++){
           if(array[i]==k)
           {
               a=i;
               break;
           }
        }
        for(int j=array.length-1;j>=0;j--){
           if(array[j]==k)
           {
               b=j;
               break;
           }
        }
        if(a!=0||b!=array.length)
            return b-a+1;
        else
            return 0;
    }
