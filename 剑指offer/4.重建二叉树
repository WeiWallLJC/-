输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和
中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。

重建二叉树时根据前序遍历和中序遍历，判断左右子树的范围，再使用递归，可以比较好的解决这个问题：
public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        TreeNode treenode=func(pre,0,pre.length-1,in,0,in.length-1);
        return treenode;
    }
    public TreeNode func(int[] pre,int startPre,int endPre,int[] in,int startIn,int endIn)
    {
        if(startPre>endPre||startIn>endIn)
            return null;
        TreeNode root=new TreeNode(pre[startPre]);
        
        for(int i=startIn;i<=endIn;i++)
        {
            if(in[i]==pre[startPre])
            {
                root.left=func(pre,startPre+1,startPre+i-startIn,in,startIn,i-1);
                root.right=func(pre,startPre+i-startIn+1,endPre,in,i+1,endIn);
            }
        }
        return root;
    }
关键点即在于决定根节点之后找到左右子树在前序遍历和中序遍历中的范围。
