在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维
数组和一个整数，判断数组中是否含有该整数。

脑瘫法：
public boolean Find(int target, int [][] array) {
        for(int i=0;i<array.length;i++)
        {
            for(int j=0;j<array[i].length;j++)
            {
                if(array[i][j]==target)
                    return true;
            }
        }
        return false;
    }
    
暴力遍历，完全没有用到题干中的排序条件。

类二分法：
public boolean Find(int target, int [][] array) {
        int row=0;
        int col=array[0].length-1;
        while(row<array.length && col>=0)
        {
            if(array[row][col]>target)
                col--;
            else if(array[row][col]<target)
                row++;
            else
                return true;
        }
        return false;
    }
    
一种类似于二分法的方法，通过比较不断缩小查找范围。
以二维数组右上角或左下角的数开始进行比较，若当前数比右上角的数大，则位置一定在它的下边，若比它小，则位置一定在它的左边，与左下角的数比较同理。
