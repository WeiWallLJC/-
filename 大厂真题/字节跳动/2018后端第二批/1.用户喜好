为了不断优化推荐效果，今日头条每天要存储和处理海量数据。假设有这样一种场景：我们对用户按照它们的注册时间先后来标号，对于一类文章，每个用户都有不同的喜
好值，我们会想知道某一段时间内注册的用户（标号相连的一批用户）中，有多少用户对这类文章喜好值为k。因为一些特殊的原因，不会出现一个查询的用户区间完全覆
盖另一个查询的用户区间(不存在L1<=L2<=R2<=R1)。



输入描述:
输入： 第1行为n代表用户的个数 第2行为n个整数，第i个代表用户标号为i的用户对某类文章的喜好度 第3行为一个正整数q代表查询的组数  第4行到第（3+q）行，每
行包含3个整数l,r,k代表一组查询，即标号为l<=i<=r的用户中对这类文章喜好值为k的用户的个数。 数据范围n <= 300000,q<=300000 k是整型

输出描述:
输出：一共q行，每行一个整数代表喜好值为k的用户的个数

输入例子1:
5
1 2 3 3 5
3
1 2 1
2 4 5
3 5 3

输出例子1:
1
0
2

例子说明1:
样例解释:
有5个用户，喜好值为分别为1、2、3、3、5，
第一组询问对于标号[1,2]的用户喜好值为1的用户的个数是1
第二组询问对于标号[2,4]的用户喜好值为5的用户的个数是0
第三组询问对于标号[3,5]的用户喜好值为3的用户的个数是2

暴力法（超时）:
public static void main(String args[])
    {
        Scanner scanner=new Scanner(System.in);
        int num=scanner.nextInt();
        int[] arr=new int[num];
        for(int i=0;i<num;i++)
        {
            arr[i]=scanner.nextInt();
        }
        int q=scanner.nextInt();
        for(int i=0;i<q;i++)
        {
            int count=0;
            int l=scanner.nextInt();
            int r=scanner.nextInt();
            int k=scanner.nextInt();
            for(int j=l-1;j<=r-1;j++)
            {
                if(arr[j]==k)
                    count+=1;
            }
            System.out.println(count);
        }

使用含List的Map法（非二分）：
public class Main{
    
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        sc.nextLine();
        int[] sn=new int[n];
        Map<Integer, ArrayList<Integer>> map=new HashMap<Integer, ArrayList<Integer>>();
        for(int i=0;i<n;i++){
            sn[i]=sc.nextInt();
            if(map.containsKey(sn[i])){
                ArrayList<Integer> alist=map.get(sn[i]);
                alist.add(i);
                map.put(sn[i],alist);
            }
            else{
                ArrayList<Integer> alist=new ArrayList<Integer>();
                alist.add(i);
                map.put(sn[i],alist);
            }
        }

        sc.nextLine();
        int q=sc.nextInt();
        for(int i=0;i<q;i++){
            sc.nextLine();
            int l=sc.nextInt()-1;
            int r=sc.nextInt()-1;
            int k=sc.nextInt();
            if(!map.containsKey(k)){
                System.out.println(0);
                continue;
            }
            ArrayList<Integer> alist=map.get(k);
            int size=alist.size();
            int ll=0;
            int rr=size-1;
            if((alist.get(rr)<l) || (alist.get(ll)>r)){
                System.out.println(0);
                continue;
            } 
            else{
                while(alist.get(ll)<l)
                    ll++;
                while(alist.get(rr)>r)
                    rr--;
            }
            System.out.println(rr-ll+1);
        }
    }
}
